//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Project/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""327a6e78-fd4a-4034-9ba6-6e8dfd4ca9cc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""905b1707-1545-4f9e-9666-519a32da2f09"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""32329b4c-2244-4bdf-b33e-bd0ff87481cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Right Lock On Target"",
                    ""type"": ""Button"",
                    ""id"": ""62b09544-2151-467b-8b89-116fd99e9602"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Lock On Target"",
                    ""type"": ""Button"",
                    ""id"": ""3a84497e-69e9-4817-8335-58b229d974e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""08b5bd79-34b5-407f-b1f1-b5d6156d2576"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8d0cf559-b174-4edc-ba43-e59b9408f4da"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""daed9065-dcb2-439a-a22e-50d6984e2476"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1dd6ae64-cf3e-4a27-8d07-67089efd936d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b3dea97d-7144-4c25-a0ca-a1327f1bff53"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fab8f68a-5ae6-4512-9e64-a35d6ae5ca75"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false,invertY=false),NormalizeVector2"",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""3a197523-6350-41d1-8430-0d41d3101162"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Lock On Target"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""2216b18c-765a-4c98-b4f1-857f7a5ead91"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Right Lock On Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""786789e6-2e39-4741-83b1-0f5773c9c6af"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Right Lock On Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""0a6f0875-5019-4be5-a144-037e4a8798ff"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Lock On Target"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""a12ccf9b-4cea-417b-aaf0-e34df9a1d1a7"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Left Lock On Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""500298d9-d0bd-4eb6-8552-1f41ed55fabd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Left Lock On Target"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Player Actions"",
            ""id"": ""ae5c62f2-19d3-40e3-955d-1e690ea7d9d2"",
            ""actions"": [
                {
                    ""name"": ""DodgeRun"",
                    ""type"": ""Button"",
                    ""id"": ""875cf91c-9565-48a8-bbe5-48f6158bb4c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1dfa18c3-686b-4b94-9e0e-04ef9b828c1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHandAction"",
                    ""type"": ""Button"",
                    ""id"": ""114a58aa-a1c1-4144-8b8a-4c0493c240e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHandSubAction"",
                    ""type"": ""Button"",
                    ""id"": ""868aac6c-d025-43d9-af2b-f7841ed6a11d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHandAction"",
                    ""type"": ""Button"",
                    ""id"": ""a68c7b04-fe6f-4a0f-9a49-1179eb133a40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHandSubAction"",
                    ""type"": ""Button"",
                    ""id"": ""cad83657-452f-4a4f-adb0-fc13803fb8bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""d0646484-2a9d-4acc-9773-579abd1bad3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""fe572607-8302-4e64-afce-5e615130bea8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LockOn"",
                    ""type"": ""Button"",
                    ""id"": ""83d624f2-8708-41d1-9a0e-6ec4630a085d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TwoHandWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""778e6aad-1457-416f-88dc-c7a1074b61ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseConsumable"",
                    ""type"": ""Button"",
                    ""id"": ""248b4105-ccbe-4d9a-b50c-4c82cafcaaa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractToggle"",
                    ""type"": ""Button"",
                    ""id"": ""ca245053-2199-479b-9ef2-35e084f3bd53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0dd502db-6a05-4df7-a18c-ed2e33e6e1c6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""DodgeRun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""a0589f41-3b46-4736-890b-d5372478cc2a"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandSubAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""d44b6c8a-ea92-4ff1-a90e-840d85a3ca2c"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RightHandSubAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""8f46856f-2573-4eb8-942c-7f6d782ae2c0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RightHandSubAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fa97655a-da15-4ff1-9315-0d7a12a106c6"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandSubAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c488f468-dda5-4d05-81c1-1c8085174a06"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LeftHandSubAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""cb9cc133-771a-49f3-ab01-d9243be39d8c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LeftHandSubAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7b1c4d2c-9d7d-4c08-85b4-f6ea25257a34"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""RightHandAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8cc41a4-bedb-4c7c-b4cf-a91b618c449b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LeftHandAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9038abab-d578-42c3-a42a-3c2ce92a7b8b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b3feea6-20a1-43f2-8247-e6ea25fae739"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95a5a92b-5c1e-4394-ae7e-c420f632fa5a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d521564b-d920-4e03-80b8-a43ed2bfa4ad"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f892d17-9919-4f18-8e09-965492ee7538"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LockOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""d2490946-b9d4-4c70-867b-baea38503436"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TwoHandWeapon"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""4fff7a2e-e651-4301-a138-6e11b9402fe4"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""TwoHandWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""35b95ff4-c3c9-4fc7-a9cd-e2a9599bdfd0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""TwoHandWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""da9fc9eb-4f29-45c9-bc25-ba9079ceef34"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""UseConsumable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""752d786c-f897-464c-af2d-232d2857c6fb"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""InteractToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI Menu Action"",
            ""id"": ""89d84e6c-fc54-45da-9817-7b5ca7512a78"",
            ""actions"": [
                {
                    ""name"": ""ChangeItem"",
                    ""type"": ""PassThrough"",
                    ""id"": ""71aa70c7-23bd-4fa8-b9f2-3c6061c0c289"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChageWeapon"",
                    ""type"": ""PassThrough"",
                    ""id"": ""64834a33-3ee8-46c1-92c6-719fe25032c1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuitMenu"",
                    ""type"": ""Button"",
                    ""id"": ""e8c993ba-fb1e-4f69-ab62-5f1d080392a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c18dc0bc-f107-4573-b3b0-0a4f331dc867"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""ChangeItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""d105c7b0-0143-4717-bc98-72259c734e9f"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChageWeapon"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""cbf14e27-f619-4995-94e6-c9991843719d"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""ChageWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""f84d3da1-0749-4f9a-bc92-85134579da46"",
                    ""path"": ""<Mouse>/position/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""ChageWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""84cc0195-330f-4db6-98b7-66fb537dbd76"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""QuitMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Quick Slots"",
            ""id"": ""ea9a58b4-0967-42a4-b92a-0ae150e22957"",
            ""actions"": [
                {
                    ""name"": ""Dpad Up"",
                    ""type"": ""Button"",
                    ""id"": ""e17aee1a-b201-47c9-b1fe-553e112bd070"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpad Down"",
                    ""type"": ""Button"",
                    ""id"": ""32aa428e-9239-40ce-9f12-ee8f1a314337"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpad Left"",
                    ""type"": ""Button"",
                    ""id"": ""c7493125-a229-4508-a8ac-8bbcb390692c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dpad Right"",
                    ""type"": ""Button"",
                    ""id"": ""6192077f-0c34-4ed3-9f5b-6414968643d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c912f360-250a-4a9b-8cec-b686bdd1810a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Dpad Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5e2372e-9298-43f3-a935-ed5139118a6c"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Dpad Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e103ac7-1e11-4d1e-a010-993f47cd1673"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Dpad Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7d8fda0-335a-47d8-aad8-5ee77b38a246"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Dpad Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player Movement
        m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Look = m_PlayerMovement.FindAction("Look", throwIfNotFound: true);
        m_PlayerMovement_RightLockOnTarget = m_PlayerMovement.FindAction("Right Lock On Target", throwIfNotFound: true);
        m_PlayerMovement_LeftLockOnTarget = m_PlayerMovement.FindAction("Left Lock On Target", throwIfNotFound: true);
        // Player Actions
        m_PlayerActions = asset.FindActionMap("Player Actions", throwIfNotFound: true);
        m_PlayerActions_DodgeRun = m_PlayerActions.FindAction("DodgeRun", throwIfNotFound: true);
        m_PlayerActions_Jump = m_PlayerActions.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActions_RightHandAction = m_PlayerActions.FindAction("RightHandAction", throwIfNotFound: true);
        m_PlayerActions_RightHandSubAction = m_PlayerActions.FindAction("RightHandSubAction", throwIfNotFound: true);
        m_PlayerActions_LeftHandAction = m_PlayerActions.FindAction("LeftHandAction", throwIfNotFound: true);
        m_PlayerActions_LeftHandSubAction = m_PlayerActions.FindAction("LeftHandSubAction", throwIfNotFound: true);
        m_PlayerActions_Interact = m_PlayerActions.FindAction("Interact", throwIfNotFound: true);
        m_PlayerActions_Menu = m_PlayerActions.FindAction("Menu", throwIfNotFound: true);
        m_PlayerActions_LockOn = m_PlayerActions.FindAction("LockOn", throwIfNotFound: true);
        m_PlayerActions_TwoHandWeapon = m_PlayerActions.FindAction("TwoHandWeapon", throwIfNotFound: true);
        m_PlayerActions_UseConsumable = m_PlayerActions.FindAction("UseConsumable", throwIfNotFound: true);
        m_PlayerActions_InteractToggle = m_PlayerActions.FindAction("InteractToggle", throwIfNotFound: true);
        // UI Menu Action
        m_UIMenuAction = asset.FindActionMap("UI Menu Action", throwIfNotFound: true);
        m_UIMenuAction_ChangeItem = m_UIMenuAction.FindAction("ChangeItem", throwIfNotFound: true);
        m_UIMenuAction_ChageWeapon = m_UIMenuAction.FindAction("ChageWeapon", throwIfNotFound: true);
        m_UIMenuAction_QuitMenu = m_UIMenuAction.FindAction("QuitMenu", throwIfNotFound: true);
        // Player Quick Slots
        m_PlayerQuickSlots = asset.FindActionMap("Player Quick Slots", throwIfNotFound: true);
        m_PlayerQuickSlots_DpadUp = m_PlayerQuickSlots.FindAction("Dpad Up", throwIfNotFound: true);
        m_PlayerQuickSlots_DpadDown = m_PlayerQuickSlots.FindAction("Dpad Down", throwIfNotFound: true);
        m_PlayerQuickSlots_DpadLeft = m_PlayerQuickSlots.FindAction("Dpad Left", throwIfNotFound: true);
        m_PlayerQuickSlots_DpadRight = m_PlayerQuickSlots.FindAction("Dpad Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Look;
    private readonly InputAction m_PlayerMovement_RightLockOnTarget;
    private readonly InputAction m_PlayerMovement_LeftLockOnTarget;
    public struct PlayerMovementActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerMovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Look => m_Wrapper.m_PlayerMovement_Look;
        public InputAction @RightLockOnTarget => m_Wrapper.m_PlayerMovement_RightLockOnTarget;
        public InputAction @LeftLockOnTarget => m_Wrapper.m_PlayerMovement_LeftLockOnTarget;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLook;
                @RightLockOnTarget.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRightLockOnTarget;
                @RightLockOnTarget.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRightLockOnTarget;
                @RightLockOnTarget.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRightLockOnTarget;
                @LeftLockOnTarget.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLeftLockOnTarget;
                @LeftLockOnTarget.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLeftLockOnTarget;
                @LeftLockOnTarget.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnLeftLockOnTarget;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @RightLockOnTarget.started += instance.OnRightLockOnTarget;
                @RightLockOnTarget.performed += instance.OnRightLockOnTarget;
                @RightLockOnTarget.canceled += instance.OnRightLockOnTarget;
                @LeftLockOnTarget.started += instance.OnLeftLockOnTarget;
                @LeftLockOnTarget.performed += instance.OnLeftLockOnTarget;
                @LeftLockOnTarget.canceled += instance.OnLeftLockOnTarget;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Player Actions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_DodgeRun;
    private readonly InputAction m_PlayerActions_Jump;
    private readonly InputAction m_PlayerActions_RightHandAction;
    private readonly InputAction m_PlayerActions_RightHandSubAction;
    private readonly InputAction m_PlayerActions_LeftHandAction;
    private readonly InputAction m_PlayerActions_LeftHandSubAction;
    private readonly InputAction m_PlayerActions_Interact;
    private readonly InputAction m_PlayerActions_Menu;
    private readonly InputAction m_PlayerActions_LockOn;
    private readonly InputAction m_PlayerActions_TwoHandWeapon;
    private readonly InputAction m_PlayerActions_UseConsumable;
    private readonly InputAction m_PlayerActions_InteractToggle;
    public struct PlayerActionsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DodgeRun => m_Wrapper.m_PlayerActions_DodgeRun;
        public InputAction @Jump => m_Wrapper.m_PlayerActions_Jump;
        public InputAction @RightHandAction => m_Wrapper.m_PlayerActions_RightHandAction;
        public InputAction @RightHandSubAction => m_Wrapper.m_PlayerActions_RightHandSubAction;
        public InputAction @LeftHandAction => m_Wrapper.m_PlayerActions_LeftHandAction;
        public InputAction @LeftHandSubAction => m_Wrapper.m_PlayerActions_LeftHandSubAction;
        public InputAction @Interact => m_Wrapper.m_PlayerActions_Interact;
        public InputAction @Menu => m_Wrapper.m_PlayerActions_Menu;
        public InputAction @LockOn => m_Wrapper.m_PlayerActions_LockOn;
        public InputAction @TwoHandWeapon => m_Wrapper.m_PlayerActions_TwoHandWeapon;
        public InputAction @UseConsumable => m_Wrapper.m_PlayerActions_UseConsumable;
        public InputAction @InteractToggle => m_Wrapper.m_PlayerActions_InteractToggle;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @DodgeRun.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnDodgeRun;
                @DodgeRun.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnDodgeRun;
                @DodgeRun.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnDodgeRun;
                @Jump.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @RightHandAction.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRightHandAction;
                @RightHandAction.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRightHandAction;
                @RightHandAction.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRightHandAction;
                @RightHandSubAction.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRightHandSubAction;
                @RightHandSubAction.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRightHandSubAction;
                @RightHandSubAction.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnRightHandSubAction;
                @LeftHandAction.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeftHandAction;
                @LeftHandAction.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeftHandAction;
                @LeftHandAction.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeftHandAction;
                @LeftHandSubAction.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeftHandSubAction;
                @LeftHandSubAction.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeftHandSubAction;
                @LeftHandSubAction.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLeftHandSubAction;
                @Interact.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteract;
                @Menu.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMenu;
                @LockOn.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLockOn;
                @LockOn.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLockOn;
                @LockOn.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnLockOn;
                @TwoHandWeapon.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnTwoHandWeapon;
                @TwoHandWeapon.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnTwoHandWeapon;
                @TwoHandWeapon.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnTwoHandWeapon;
                @UseConsumable.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnUseConsumable;
                @UseConsumable.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnUseConsumable;
                @UseConsumable.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnUseConsumable;
                @InteractToggle.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteractToggle;
                @InteractToggle.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteractToggle;
                @InteractToggle.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnInteractToggle;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DodgeRun.started += instance.OnDodgeRun;
                @DodgeRun.performed += instance.OnDodgeRun;
                @DodgeRun.canceled += instance.OnDodgeRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @RightHandAction.started += instance.OnRightHandAction;
                @RightHandAction.performed += instance.OnRightHandAction;
                @RightHandAction.canceled += instance.OnRightHandAction;
                @RightHandSubAction.started += instance.OnRightHandSubAction;
                @RightHandSubAction.performed += instance.OnRightHandSubAction;
                @RightHandSubAction.canceled += instance.OnRightHandSubAction;
                @LeftHandAction.started += instance.OnLeftHandAction;
                @LeftHandAction.performed += instance.OnLeftHandAction;
                @LeftHandAction.canceled += instance.OnLeftHandAction;
                @LeftHandSubAction.started += instance.OnLeftHandSubAction;
                @LeftHandSubAction.performed += instance.OnLeftHandSubAction;
                @LeftHandSubAction.canceled += instance.OnLeftHandSubAction;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @LockOn.started += instance.OnLockOn;
                @LockOn.performed += instance.OnLockOn;
                @LockOn.canceled += instance.OnLockOn;
                @TwoHandWeapon.started += instance.OnTwoHandWeapon;
                @TwoHandWeapon.performed += instance.OnTwoHandWeapon;
                @TwoHandWeapon.canceled += instance.OnTwoHandWeapon;
                @UseConsumable.started += instance.OnUseConsumable;
                @UseConsumable.performed += instance.OnUseConsumable;
                @UseConsumable.canceled += instance.OnUseConsumable;
                @InteractToggle.started += instance.OnInteractToggle;
                @InteractToggle.performed += instance.OnInteractToggle;
                @InteractToggle.canceled += instance.OnInteractToggle;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // UI Menu Action
    private readonly InputActionMap m_UIMenuAction;
    private IUIMenuActionActions m_UIMenuActionActionsCallbackInterface;
    private readonly InputAction m_UIMenuAction_ChangeItem;
    private readonly InputAction m_UIMenuAction_ChageWeapon;
    private readonly InputAction m_UIMenuAction_QuitMenu;
    public struct UIMenuActionActions
    {
        private @PlayerControls m_Wrapper;
        public UIMenuActionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeItem => m_Wrapper.m_UIMenuAction_ChangeItem;
        public InputAction @ChageWeapon => m_Wrapper.m_UIMenuAction_ChageWeapon;
        public InputAction @QuitMenu => m_Wrapper.m_UIMenuAction_QuitMenu;
        public InputActionMap Get() { return m_Wrapper.m_UIMenuAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIMenuActionActions set) { return set.Get(); }
        public void SetCallbacks(IUIMenuActionActions instance)
        {
            if (m_Wrapper.m_UIMenuActionActionsCallbackInterface != null)
            {
                @ChangeItem.started -= m_Wrapper.m_UIMenuActionActionsCallbackInterface.OnChangeItem;
                @ChangeItem.performed -= m_Wrapper.m_UIMenuActionActionsCallbackInterface.OnChangeItem;
                @ChangeItem.canceled -= m_Wrapper.m_UIMenuActionActionsCallbackInterface.OnChangeItem;
                @ChageWeapon.started -= m_Wrapper.m_UIMenuActionActionsCallbackInterface.OnChageWeapon;
                @ChageWeapon.performed -= m_Wrapper.m_UIMenuActionActionsCallbackInterface.OnChageWeapon;
                @ChageWeapon.canceled -= m_Wrapper.m_UIMenuActionActionsCallbackInterface.OnChageWeapon;
                @QuitMenu.started -= m_Wrapper.m_UIMenuActionActionsCallbackInterface.OnQuitMenu;
                @QuitMenu.performed -= m_Wrapper.m_UIMenuActionActionsCallbackInterface.OnQuitMenu;
                @QuitMenu.canceled -= m_Wrapper.m_UIMenuActionActionsCallbackInterface.OnQuitMenu;
            }
            m_Wrapper.m_UIMenuActionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeItem.started += instance.OnChangeItem;
                @ChangeItem.performed += instance.OnChangeItem;
                @ChangeItem.canceled += instance.OnChangeItem;
                @ChageWeapon.started += instance.OnChageWeapon;
                @ChageWeapon.performed += instance.OnChageWeapon;
                @ChageWeapon.canceled += instance.OnChageWeapon;
                @QuitMenu.started += instance.OnQuitMenu;
                @QuitMenu.performed += instance.OnQuitMenu;
                @QuitMenu.canceled += instance.OnQuitMenu;
            }
        }
    }
    public UIMenuActionActions @UIMenuAction => new UIMenuActionActions(this);

    // Player Quick Slots
    private readonly InputActionMap m_PlayerQuickSlots;
    private IPlayerQuickSlotsActions m_PlayerQuickSlotsActionsCallbackInterface;
    private readonly InputAction m_PlayerQuickSlots_DpadUp;
    private readonly InputAction m_PlayerQuickSlots_DpadDown;
    private readonly InputAction m_PlayerQuickSlots_DpadLeft;
    private readonly InputAction m_PlayerQuickSlots_DpadRight;
    public struct PlayerQuickSlotsActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerQuickSlotsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DpadUp => m_Wrapper.m_PlayerQuickSlots_DpadUp;
        public InputAction @DpadDown => m_Wrapper.m_PlayerQuickSlots_DpadDown;
        public InputAction @DpadLeft => m_Wrapper.m_PlayerQuickSlots_DpadLeft;
        public InputAction @DpadRight => m_Wrapper.m_PlayerQuickSlots_DpadRight;
        public InputActionMap Get() { return m_Wrapper.m_PlayerQuickSlots; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerQuickSlotsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerQuickSlotsActions instance)
        {
            if (m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface != null)
            {
                @DpadUp.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadUp;
                @DpadUp.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadUp;
                @DpadUp.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadUp;
                @DpadDown.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadDown;
                @DpadDown.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadDown;
                @DpadDown.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadDown;
                @DpadLeft.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadLeft;
                @DpadLeft.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadLeft;
                @DpadLeft.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadLeft;
                @DpadRight.started -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadRight;
                @DpadRight.performed -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadRight;
                @DpadRight.canceled -= m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface.OnDpadRight;
            }
            m_Wrapper.m_PlayerQuickSlotsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DpadUp.started += instance.OnDpadUp;
                @DpadUp.performed += instance.OnDpadUp;
                @DpadUp.canceled += instance.OnDpadUp;
                @DpadDown.started += instance.OnDpadDown;
                @DpadDown.performed += instance.OnDpadDown;
                @DpadDown.canceled += instance.OnDpadDown;
                @DpadLeft.started += instance.OnDpadLeft;
                @DpadLeft.performed += instance.OnDpadLeft;
                @DpadLeft.canceled += instance.OnDpadLeft;
                @DpadRight.started += instance.OnDpadRight;
                @DpadRight.performed += instance.OnDpadRight;
                @DpadRight.canceled += instance.OnDpadRight;
            }
        }
    }
    public PlayerQuickSlotsActions @PlayerQuickSlots => new PlayerQuickSlotsActions(this);
    private int m_KeyboardAndMouseSchemeIndex = -1;
    public InputControlScheme KeyboardAndMouseScheme
    {
        get
        {
            if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
            return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
        }
    }
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnRightLockOnTarget(InputAction.CallbackContext context);
        void OnLeftLockOnTarget(InputAction.CallbackContext context);
    }
    public interface IPlayerActionsActions
    {
        void OnDodgeRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRightHandAction(InputAction.CallbackContext context);
        void OnRightHandSubAction(InputAction.CallbackContext context);
        void OnLeftHandAction(InputAction.CallbackContext context);
        void OnLeftHandSubAction(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnLockOn(InputAction.CallbackContext context);
        void OnTwoHandWeapon(InputAction.CallbackContext context);
        void OnUseConsumable(InputAction.CallbackContext context);
        void OnInteractToggle(InputAction.CallbackContext context);
    }
    public interface IUIMenuActionActions
    {
        void OnChangeItem(InputAction.CallbackContext context);
        void OnChageWeapon(InputAction.CallbackContext context);
        void OnQuitMenu(InputAction.CallbackContext context);
    }
    public interface IPlayerQuickSlotsActions
    {
        void OnDpadUp(InputAction.CallbackContext context);
        void OnDpadDown(InputAction.CallbackContext context);
        void OnDpadLeft(InputAction.CallbackContext context);
        void OnDpadRight(InputAction.CallbackContext context);
    }
}
